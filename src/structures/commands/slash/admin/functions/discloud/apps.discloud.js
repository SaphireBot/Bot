import { SaphireClient as client, Discloud } from '../../../../../../classes/index.js'
import { Emojis as e } from '../../../../../../util/util.js'

export default async interaction => {

    await interaction.reply({
        content: `${e.Loading} | Solicitando informaÃ§Ãµes a Discloud Host...`
    })

    const response = await Discloud.apps.fetch()

    if (!response)
        return await interaction.editReply({
            content: `${e.Deny} | Nenhuma informaÃ§Ã£o foi coletada.`
        }).catch(() => { })

    const apps = [...response.values()]
    const embeds = []

    for (let app of apps)
        embeds.push({
            color: client.blue,
            title: 'ğŸ¤– InformaÃ§Ãµes das AplicaÃ§Ãµes | Discloud',
            fields: [
                {
                    name: 'ğŸ§© InformaÃ§Ãµes Basicas',
                    value: `Auto Restart: ${app.autoRestart ? e.Check : e.Deny}\nid: \`${app.id}\`\nLinguagem: \`${app.lang}\`\nArquivo Principal: \`${app.mainFile}\``
                },
                {
                    name: `ğŸ›¡ Moderadores - ${app.mods.length}`,
                    value: app.mods.length > 0 ? app.mods.map(id => `${client.users.resolve(id)?.tag} - \`${id}\`` || `*Not Found* - \`${id}\``).join('\n') : 'Nenhum moderador'
                },
                {
                    name: 'ğŸ“¡ Status',
                    value: `${app.online ? `ğŸŸ¢ Online com ${e.Ram} ${app.ram}MB RAM disponÃ­vel` : 'ğŸ”´ Offline'}`
                }
            ]
        })

    return await interaction.editReply({
        content: null,
        embeds: embeds
    })

}